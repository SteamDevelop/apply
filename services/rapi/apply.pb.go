// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apply.proto

package rapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ApplyReq struct {
	Finger               string   `protobuf:"bytes,1,opt,name=finger,proto3" json:"finger,omitempty"`
	Pass                 string   `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyReq) Reset()         { *m = ApplyReq{} }
func (m *ApplyReq) String() string { return proto.CompactTextString(m) }
func (*ApplyReq) ProtoMessage()    {}
func (*ApplyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_993661bab0ce9d1e, []int{0}
}

func (m *ApplyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyReq.Unmarshal(m, b)
}
func (m *ApplyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyReq.Marshal(b, m, deterministic)
}
func (m *ApplyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyReq.Merge(m, src)
}
func (m *ApplyReq) XXX_Size() int {
	return xxx_messageInfo_ApplyReq.Size(m)
}
func (m *ApplyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyReq proto.InternalMessageInfo

func (m *ApplyReq) GetFinger() string {
	if m != nil {
		return m.Finger
	}
	return ""
}

func (m *ApplyReq) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

type ApplyRes struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyRes) Reset()         { *m = ApplyRes{} }
func (m *ApplyRes) String() string { return proto.CompactTextString(m) }
func (*ApplyRes) ProtoMessage()    {}
func (*ApplyRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_993661bab0ce9d1e, []int{1}
}

func (m *ApplyRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyRes.Unmarshal(m, b)
}
func (m *ApplyRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyRes.Marshal(b, m, deterministic)
}
func (m *ApplyRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyRes.Merge(m, src)
}
func (m *ApplyRes) XXX_Size() int {
	return xxx_messageInfo_ApplyRes.Size(m)
}
func (m *ApplyRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyRes.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyRes proto.InternalMessageInfo

func (m *ApplyRes) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type SignReq struct {
	Finger               string   `protobuf:"bytes,1,opt,name=finger,proto3" json:"finger,omitempty"`
	Pass                 string   `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignReq) Reset()         { *m = SignReq{} }
func (m *SignReq) String() string { return proto.CompactTextString(m) }
func (*SignReq) ProtoMessage()    {}
func (*SignReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_993661bab0ce9d1e, []int{2}
}

func (m *SignReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignReq.Unmarshal(m, b)
}
func (m *SignReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignReq.Marshal(b, m, deterministic)
}
func (m *SignReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignReq.Merge(m, src)
}
func (m *SignReq) XXX_Size() int {
	return xxx_messageInfo_SignReq.Size(m)
}
func (m *SignReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SignReq.DiscardUnknown(m)
}

var xxx_messageInfo_SignReq proto.InternalMessageInfo

func (m *SignReq) GetFinger() string {
	if m != nil {
		return m.Finger
	}
	return ""
}

func (m *SignReq) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

type SignRes struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignRes) Reset()         { *m = SignRes{} }
func (m *SignRes) String() string { return proto.CompactTextString(m) }
func (*SignRes) ProtoMessage()    {}
func (*SignRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_993661bab0ce9d1e, []int{3}
}

func (m *SignRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignRes.Unmarshal(m, b)
}
func (m *SignRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignRes.Marshal(b, m, deterministic)
}
func (m *SignRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignRes.Merge(m, src)
}
func (m *SignRes) XXX_Size() int {
	return xxx_messageInfo_SignRes.Size(m)
}
func (m *SignRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SignRes.DiscardUnknown(m)
}

var xxx_messageInfo_SignRes proto.InternalMessageInfo

func (m *SignRes) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*ApplyReq)(nil), "rapi.ApplyReq")
	proto.RegisterType((*ApplyRes)(nil), "rapi.ApplyRes")
	proto.RegisterType((*SignReq)(nil), "rapi.SignReq")
	proto.RegisterType((*SignRes)(nil), "rapi.SignRes")
}

func init() { proto.RegisterFile("apply.proto", fileDescriptor_993661bab0ce9d1e) }

var fileDescriptor_993661bab0ce9d1e = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2c, 0x28, 0xc8,
	0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x4a, 0x2c, 0xc8, 0x54, 0x32, 0xe3,
	0xe2, 0x70, 0x04, 0x09, 0x06, 0xa5, 0x16, 0x0a, 0x89, 0x71, 0xb1, 0xa5, 0x65, 0xe6, 0xa5, 0xa7,
	0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x79, 0x42, 0x42, 0x5c, 0x2c, 0x05, 0x89,
	0xc5, 0xc5, 0x12, 0x4c, 0x60, 0x51, 0x30, 0x5b, 0x49, 0x06, 0xae, 0xaf, 0x58, 0x48, 0x80, 0x8b,
	0x39, 0xb5, 0x08, 0xa6, 0x09, 0xc4, 0x54, 0x32, 0xe5, 0x62, 0x0f, 0xce, 0x4c, 0xcf, 0x23, 0xd5,
	0x50, 0x69, 0x98, 0x36, 0x2c, 0x66, 0x1a, 0x85, 0x72, 0xb1, 0x04, 0x25, 0x16, 0x64, 0x0a, 0xa9,
	0x73, 0xb1, 0x82, 0xbd, 0x21, 0xc4, 0xa7, 0x07, 0xf2, 0x81, 0x1e, 0xcc, 0xf9, 0x52, 0xa8, 0xfc,
	0x62, 0x21, 0x15, 0x2e, 0x96, 0xe2, 0xcc, 0xf4, 0x3c, 0x21, 0x5e, 0x88, 0x38, 0xd4, 0x41, 0x52,
	0x28, 0xdc, 0xe2, 0x24, 0x36, 0x70, 0x68, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x46, 0x56,
	0x34, 0x54, 0x1c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RapiClient is the client API for Rapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RapiClient interface {
	Apply(ctx context.Context, in *ApplyReq, opts ...grpc.CallOption) (*ApplyRes, error)
	Sign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignRes, error)
}

type rapiClient struct {
	cc *grpc.ClientConn
}

func NewRapiClient(cc *grpc.ClientConn) RapiClient {
	return &rapiClient{cc}
}

func (c *rapiClient) Apply(ctx context.Context, in *ApplyReq, opts ...grpc.CallOption) (*ApplyRes, error) {
	out := new(ApplyRes)
	err := c.cc.Invoke(ctx, "/rapi.Rapi/apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapiClient) Sign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignRes, error) {
	out := new(SignRes)
	err := c.cc.Invoke(ctx, "/rapi.Rapi/sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RapiServer is the server API for Rapi service.
type RapiServer interface {
	Apply(context.Context, *ApplyReq) (*ApplyRes, error)
	Sign(context.Context, *SignReq) (*SignRes, error)
}

// UnimplementedRapiServer can be embedded to have forward compatible implementations.
type UnimplementedRapiServer struct {
}

func (*UnimplementedRapiServer) Apply(ctx context.Context, req *ApplyReq) (*ApplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (*UnimplementedRapiServer) Sign(ctx context.Context, req *SignReq) (*SignRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}

func RegisterRapiServer(s *grpc.Server, srv RapiServer) {
	s.RegisterService(&_Rapi_serviceDesc, srv)
}

func _Rapi_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapiServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapi.Rapi/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapiServer).Apply(ctx, req.(*ApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rapi_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapiServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapi.Rapi/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapiServer).Sign(ctx, req.(*SignReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rapi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rapi.Rapi",
	HandlerType: (*RapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "apply",
			Handler:    _Rapi_Apply_Handler,
		},
		{
			MethodName: "sign",
			Handler:    _Rapi_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apply.proto",
}
